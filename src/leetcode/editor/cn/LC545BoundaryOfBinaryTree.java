package leetcode.editor.cn;

import com.company.TreeNode;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class LC545BoundaryOfBinaryTree {
    public static void main(String[] args) {
        Solution solution = new LC545BoundaryOfBinaryTree().new Solution();
    }
/**
 * È¢òÁõÆIdÔºö545
 * È¢òÁõÆÔºö‰∫åÂèâÊ†ëÁöÑËæπÁïå
 * Êó•ÊúüÔºö2021-03-21 12:51:06
 */
//‰∫åÂèâÊ†ëÁöÑ ËæπÁïå ÊòØÁî± Ê†πËäÇÁÇπ „ÄÅÂ∑¶ËæπÁïå „ÄÅÊåâ‰ªéÂ∑¶Âà∞Âè≥È°∫Â∫èÁöÑ Âè∂ËäÇÁÇπ Âíå ÈÄÜÂ∫èÁöÑÂè≥ËæπÁïå ÔºåÊåâÈ°∫Â∫è‰æùÊ¨°ËøûÊé•ÁªÑÊàê„ÄÇ 
//
// Â∑¶ËæπÁïå ÊòØÊª°Ë∂≥‰∏ãËø∞ÂÆö‰πâÁöÑËäÇÁÇπÈõÜÂêàÔºö 
//
// 
// Ê†πËäÇÁÇπÁöÑÂ∑¶Â≠êËäÇÁÇπÂú®Â∑¶ËæπÁïå‰∏≠„ÄÇÂ¶ÇÊûúÊ†πËäÇÁÇπ‰∏çÂê´Â∑¶Â≠êËäÇÁÇπÔºåÈÇ£‰πàÂ∑¶ËæπÁïåÂ∞±‰∏∫ Á©∫ „ÄÇ 
// Â¶ÇÊûú‰∏Ä‰∏™ËäÇÁÇπÂú®Â∑¶ËæπÁïå‰∏≠ÔºåÂπ∂‰∏îËØ•ËäÇÁÇπÊúâÂ∑¶Â≠êËäÇÁÇπÔºåÈÇ£‰πàÂÆÉÁöÑÂ∑¶Â≠êËäÇÁÇπ‰πüÂú®Â∑¶ËæπÁïå‰∏≠„ÄÇ 
// Â¶ÇÊûú‰∏Ä‰∏™ËäÇÁÇπÂú®Â∑¶ËæπÁïå‰∏≠ÔºåÂπ∂‰∏îËØ•ËäÇÁÇπ ‰∏çÂê´ Â∑¶Â≠êËäÇÁÇπÔºåÈÇ£‰πàÂÆÉÁöÑÂè≥Â≠êËäÇÁÇπÂ∞±Âú®Â∑¶ËæπÁïå‰∏≠„ÄÇ 
// ÊúÄÂ∑¶‰æßÁöÑÂè∂ËäÇÁÇπ ‰∏çÂú® Â∑¶ËæπÁïå‰∏≠„ÄÇ 
// 
//
// Âè≥ËæπÁïå ÂÆö‰πâÊñπÂºè‰∏é Â∑¶ËæπÁïå Áõ∏ÂêåÔºåÂè™ÊòØÂ∞ÜÂ∑¶ÊõøÊç¢ÊàêÂè≥„ÄÇÂç≥ÔºåÂè≥ËæπÁïåÊòØÊ†πËäÇÁÇπÂè≥Â≠êÊ†ëÁöÑÂè≥‰æßÈÉ®ÂàÜÔºõÂè∂ËäÇÁÇπ ‰∏çÊòØ Âè≥ËæπÁïåÁöÑÁªÑÊàêÈÉ®ÂàÜÔºõÂ¶ÇÊûúÊ†πËäÇÁÇπ‰∏çÂê´Âè≥Â≠êËäÇÁÇπÔºåÈÇ£‰πàÂè≥ËæπÁïå
//‰∏∫ Á©∫ „ÄÇ 
//
// Âè∂ËäÇÁÇπ ÊòØÊ≤°Êúâ‰ªª‰ΩïÂ≠êËäÇÁÇπÁöÑËäÇÁÇπ„ÄÇÂØπ‰∫éÊ≠§ÈóÆÈ¢òÔºåÊ†πËäÇÁÇπ ‰∏çÊòØ Âè∂ËäÇÁÇπ„ÄÇ 
//
// Áªô‰Ω†‰∏ÄÊ£µ‰∫åÂèâÊ†ëÁöÑÊ†πËäÇÁÇπ root ÔºåÊåâÈ°∫Â∫èËøîÂõûÁªÑÊàê‰∫åÂèâÊ†ë ËæπÁïå ÁöÑËøô‰∫õÂÄº„ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºöroot = [1,null,2,3,4]
//ËæìÂá∫Ôºö[1,3,4,2]
//Ëß£ÈáäÔºö
//- Â∑¶ËæπÁïå‰∏∫Á©∫ÔºåÂõ†‰∏∫‰∫åÂèâÊ†ë‰∏çÂê´Â∑¶Â≠êËäÇÁÇπ„ÄÇ
//- Âè≥ËæπÁïåÊòØ [2] „ÄÇ‰ªéÊ†πËäÇÁÇπÁöÑÂè≥Â≠êËäÇÁÇπÂºÄÂßãÁöÑË∑ØÂæÑ‰∏∫ 2 -> 4 Ôºå‰ΩÜ 4 ÊòØÂè∂ËäÇÁÇπÔºåÊâÄ‰ª•Âè≥ËæπÁïåÂè™Êúâ 2 „ÄÇ
//- Âè∂ËäÇÁÇπ‰ªéÂ∑¶Âà∞Âè≥ÊòØ [3,4] „ÄÇ
//ÊåâÈ¢òÁõÆË¶ÅÊ±Ç‰æùÂ∫èËøûÊé•ÂæóÂà∞ÁªìÊûú [1] + [] + [3,4] + [2] = [1,3,4,2] „ÄÇ 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºöroot = [1,2,3,4,5,6,null,null,null,7,8,9,10]
//ËæìÂá∫Ôºö[1,2,4,7,8,9,10,6,3]
//Ëß£ÈáäÔºö
//- Â∑¶ËæπÁïå‰∏∫ [2] „ÄÇ‰ªéÊ†πËäÇÁÇπÁöÑÂ∑¶Â≠êËäÇÁÇπÂºÄÂßãÁöÑË∑ØÂæÑ‰∏∫ 2 -> 4 Ôºå‰ΩÜ 4 ÊòØÂè∂ËäÇÁÇπÔºåÊâÄ‰ª•Â∑¶ËæπÁïåÂè™Êúâ 2 „ÄÇ
//- Âè≥ËæπÁïåÊòØ [3,6] ÔºåÈÄÜÂ∫è‰∏∫ [6,3] „ÄÇ‰ªéÊ†πËäÇÁÇπÁöÑÂè≥Â≠êËäÇÁÇπÂºÄÂßãÁöÑË∑ØÂæÑ‰∏∫ 3 -> 6 -> 10 Ôºå‰ΩÜ 10 ÊòØÂè∂ËäÇÁÇπ„ÄÇ
//- Âè∂ËäÇÁÇπ‰ªéÂ∑¶Âà∞Âè≥ÊòØ [4,7,8,9,10]
//ÊåâÈ¢òÁõÆË¶ÅÊ±Ç‰æùÂ∫èËøûÊé•ÂæóÂà∞ÁªìÊûú [1] + [2] + [4,7,8,9,10] + [6,3] = [1,2,4,7,8,9,10,6,3] „ÄÇ 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// Ê†ë‰∏≠ËäÇÁÇπÁöÑÊï∞ÁõÆÂú®ËåÉÂõ¥ [1, 104] ÂÜÖ 
// -1000 <= Node.val <= 1000 
// 
// Related Topics Ê†ë 
// üëç 63 üëé 0

//leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public List<Integer> boundaryOfBinaryTree(TreeNode root) {
            if(root ==null){
                return null;
            }
            List<Integer> rootList = new LinkedList<>();
            rootList.add(root.val);
            if(root.left ==null && root.right ==null){
                return rootList;
            }
            List<Integer> leftList = new LinkedList<>();
            findLeft(root, leftList);
            List<Integer>  leafList = new LinkedList<>();
            findLeaf(root,leafList);
            List<Integer> rightList = new LinkedList<>();
            findRight(root, rightList);
            if (leftList != null) {
                rootList.addAll(leftList);
            }
            if(leafList !=null){
                rootList.addAll(leafList);
            }
            if (rightList != null) {
                rootList.addAll(rightList);
            }
            return rootList;
        }

        private void findLeaf(TreeNode root,List<Integer> list){
            if(root ==null){
                return;
            }
            if(root.left ==null && root.right ==null){
               list.add(root.val);
            }
            findLeaf(root.left,list);
            findLeaf(root.right,list);
        }


        private void findLeft(TreeNode root, List<Integer> list) {
            if (root.left == null) {
                return;
            }
            int flag = 1;
            while (root.left != null || root.right != null) {
                if (flag == 1) {
                    while (root.left != null) {
                        if (root.left.left == null && root.left.right == null) {
                            return;
                        } else if (root.left.left == null) {
                            list.add(root.left.val);
                            root = root.left;
                            flag = 2;
                            break;
                        }else {
                            list.add(root.left.val);
                            root = root.left;
                        }
                    }
                } else {
                    if(root.right.left !=null){
                        list.add(root.right.val);
                        root = root.right;
                        flag = 1;
                        continue;
                    }
                    while (root.right != null) {
                        if (root.right.right == null && root.right.left == null) {
                            return;
                        } else if (root.right.right == null) {
                            list.add(root.right.val);
                            root = root.right;
                            flag = 1;
                            break;
                        }else {
                            list.add(root.right.val);
                            root = root.right;
                        }
                    }
                }
            }
        }

        private void findRight(TreeNode root, List<Integer> list) {
            if (root.right == null) {
                return;
            }
            int flag = 2;
            while (root.left != null || root.right != null) {
                if (flag == 1) {
                    if(root.left.right !=null){
                        list.add(0,root.left.val);
                        root = root.left;
                        flag = 2;
                        continue;
                    }
                    while (root.left != null) {
                        if (root.left.left == null && root.left.right == null) {
                            return;
                        } else if (root.left.left == null) {
                            list.add(0, root.left.val);
                            root = root.left;
                            flag = 2;
                            break;
                        }else {
                            list.add(0, root.left.val);
                            root = root.left;
                        }
                    }
                } else {
                    while (root.right != null) {
                //        System.out.println("root.right ="+root.right.val);
                        if (root.right.right == null && root.right.left == null) {
                            return;
                        } else if (root.right.right == null) {
                            list.add(0, root.right.val);
                            root = root.right;
                            flag = 1;
                            break;
                        }else {
                            list.add(0, root.right.val);
                            root = root.right;
                        }
                    }
                }
            }
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}